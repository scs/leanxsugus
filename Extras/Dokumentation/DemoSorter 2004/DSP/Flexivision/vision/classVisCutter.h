/**
* @file
* @author Bernhard Mäder
*/


#ifndef _CLASSVISCUTTER_H_
#define _CLASSVISCUTTER_H_

#include "classVisComponent.h"
#include "classVisProperty.h"
#include "classVisInputPort.h"
#include "classVisOutputPort.h"

/**
* @brief An image cutting component.
*
* The cutter cuts small images each containing a potato object, out of a big picture.
*/
class CVisCutter : public CVisComponent
{
public:
	enum CutterConsts {
		CUTIMG_WIDTH = 140,		// must be dividible by 4!
		CUTIMG_HEIGHT = 88		// must be dividible by 4!
	};

	/**
	* Constructor.
	*/
							CVisCutter( const Char * strName );

	/**
	* Processing function. This function must be called once for each
	* input frame. Successive output frames must be generated by calling
	* NextOutputImage().
	*/
	void					DoProcessing();

	/**
	* Flag to indicate that there are still more output images to process.
	* This flag may as well be false from the beginning, that is right after
	* DoProcessing() is called. That happens when there are no potatoes found
	* in the input image.
	*/
	bool					HasMoreOutputImages();

	/**
	* Proceeds to the next output image. After this call, the next frame is 
	* visible on all input ports connected to this component.
	*
	* Image cutting is performed double-buffered and thus the buffer pointer
	* of all connected ports is modified when this function is called.
	*/
	void					NextOutputImage();

	/**
	* Returns the Id of the potato currently being processed. The id can be used
	* to look the potato data up in the global potato objects table.
	*/
	Uint32					GetCurrentPotatoId();


private:

	CVisInputPort			m_iportImage;
	CVisInputPort			m_iportObjectsList;
	CVisInputPort			m_iportLabelObjects;
	CVisOutputPort			m_oportCutImage;

	bool					m_bMoreOutputImages;
	bool					m_bIsCopying;
	Uint32					m_unCurrentCopyIndex;

	Int32					m_nCurrentObject;
	Int32					m_nNextObject;

	Uint32					m_unCurrentInputWidth;
	Uint32					m_unCurrentInputHeight;
};

#endif

